<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="generator" content="pandoc">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes">
  <title></title>
  <style type="text/css">code{white-space: pre;}</style>
  <link rel="stylesheet" href="jd.css">
  <!--[if lt IE 9]>
    <script src="//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js"></script>
  <![endif]-->
</head>
<body>
<p><div id="nav"><a href="Index.htm">Jd</a>&nbsp;|&nbsp;<a href="Overview.htm">Overview</a>&nbsp;|&nbsp;<a href="General.htm">General</a>&nbsp;|&nbsp;<a href="Ops.htm">Ops</a>&nbsp;|&nbsp;<a href="Admin.htm">Admin</a>&nbsp;|&nbsp;<a href="Replicate.htm">Replicate</a>&nbsp;|&nbsp;<a href="Guide.htm">Guide</a>&nbsp;|&nbsp;<a href="Technical.htm">Technical</a>&nbsp;|&nbsp;<a href="Release.htm">Release</a>&nbsp;|&nbsp;<a href="License.htm">License</a>&nbsp;|&nbsp;<a href="Support.htm">Support</a></div></p>
<h2 id="args">args</h2>
<p>The main function is <code>jd</code>:</p>
<pre><code>   jd&#39;...&#39; NB. perform Jd op</code></pre>
<p>The argument is parsed to a list of boxes. A string is treated as list of blank delimited boxes. The first box in a list of boxes is treated as a list of blank delimited values.</p>
<pre><code>   jd&#39;insert f a&#39;;23     === jd&#39;insert&#39;;&#39;f&#39;;&#39;a&#39;;23</code></pre>
<p>Column definitions have blanks and are delimited by , or LF and have more complicated rules. The following are equivalent:</p>
<pre><code>   jd&#39;createtable f a int,b byte 4&#39;
   jd&#39;createtable f a int&#39;,LF,&#39;byte 4&#39;
   jd&#39;createtable&#39;;&#39;f&#39;;&#39;a int&#39;;&#39;b byte 4&#39;
   jd&#39;createtable f a&#39;;&#39;a int&#39;;&#39;b byte 4&#39;</code></pre>
<p>Options follow the command, start with /, and have a fixed number (0 or more) parameters.</p>
<pre><code>   jd&#39;reads /lr /e from f&#39;</code></pre>
<h2 id="names">names</h2>
<p>table and column names have similar rules:</p>
<ul>
<li><code>jd...</code> prefix not allowed</li>
<li>unprintable chars (32{.a.) not allowed</li>
<li>used as folder names
<ul>
<li>unix file names are case sensitive - windows are not</li>
<li>names differing only in case could lead to grief</li>
</ul></li>
<li>utf-8 supported
<ul>
<li>macOS problems - composed vs decomposed
<ul>
<li>could be resolved - for now avoid utf-8 names on macOS</li>
</ul></li>
</ul></li>
<li>table names
<ul>
<li>not allowed in &quot;s</li>
<li><code>RESERVEDCHARS_jd_</code>not allowed</li>
<li><code>RESERVEDWORDS_jd_</code>not allowed</li>
<li>the <code>^</code> char is used in ptable names and should be avoided</li>
<li>the <code>()</code> chars could conflict with where clause and should be avoided</li>
</ul></li>
<li>col names
<ul>
<li>col names can be in &quot;s</li>
<li>&quot; is escaped in a col name - “a\”b&quot;</li>
<li>read op parsing may require col names in &quot;s
<ul>
<li>jd'read “c d”,a=b from f where “a=b”=23'</li>
</ul></li>
<li>ref col can not have _ char</li>
<li>names with OSFNA_jd_ chars are not used directly as folder names
<ul>
<li>name a/b maps to folder name `a`b`b
<ul>
<li>dfromn_jd_'a/b' NB. folder name from col name</li>
<li>nfromd_jd_'`a`b`b' NB. folder name from col name</li>
</ul></li>
</ul></li>
</ul></li>
</ul>
<p><code>   jdaddq_jd_'a&quot; /' NB. &quot; if required by &quot; or blank</code><br />
“<code>a\</code>”<code> /&quot;</code><br />
<code>   jdremq_jd_'</code>“<code>a\</code>”<code> /&quot;' NB. remove &quot;s</code><br />
<code>a&quot; /</code></p>
<h2 id="types">types</h2>
<p>boolean int float</p>
<dl>

<dd>correspond directly to J data types
</dd>
</dl>
<p>byte</p>
<dl>

<dd>corresponds directly to J literal data
</dd>
</dl>
<dl>

<dd>only type that can have a trailing shape
</dd>
</dl>
<p>int1 int2 int4</p>
<dl>

<dd>1/2/4 byte signed integers - stored as literal strings
</dd>
</dl>
<dl>

<dd>converted to int for processing (queries/selections/etc.) and in results
</dd>
</dl>
<dl>

<dd>set with J int values that are range checked
</dd>
</dl>
<dl>

<dd>not allowed in ref/key/sort or ptable pcol (could be supported with more work)
</dd>
</dl>
<dl>

<dd>op intx converts a col type/data between int/int1/int2/int4
</dd>
</dl>
<p>edate edatetime edatetimem edatetimen (tutorial epochdt)</p>
<dl>

<dd>edate types are in iso 8601 format and are stored as nanoseconds before/after 2000-01-01
</dd>
</dl>
<pre><code>edate      2014-01-02
edatetime  2014-01-02T03:04:05
edatetimem 2014-01-02T03:04:05,123
edatetimen 2014-01-02T03:04:05,123456789</code></pre>
<p>date datetime</p>
<pre><code>date     yyyymmdd
datetime yyyymmddhhmmss</code></pre>
<dl>

<dd>csv loader supports yyyy/mm/dd vs mm/dd/yyyy
</dd>
</dl>
<p>varbyte</p>
<dl>

<dd>with max size less than 50, it is better to store as byte N
</dd>
</dl>
<h2 id="errors">errors</h2>
<p>jdlast - info on last error</p>
<p>jdlasty - last operation</p>
<h2 id="pairs">pairs</h2>
<p>list of pairs of column names and data</p>
<p>pairs are args to insert, update, and other ops</p>
<p>'a' ; 23 24 ; 'b' ; 1.2 1.3 ; 'c' ; 2 3$'abcdef' 'a' ; 23 24 ; 'b' ; 1.2 ; 'c' ; 'abc'</p>
<p>data extends so the count is the same for all cols</p>
<p>byte N col does undertake but not overtake</p>
<p>,jd'read ....' NB. valid pairs</p>
<p>,|:jd'reads ...' NB. not valid pairs (all cols rank 2 and varbyte not boxed)</p>
<h2 id="key">key</h2>
<p>One or more cols in a table can be treated as a key.</p>
<p>A key in a table does not have to be unique. If a table contains a key more than once, and an operation requires just one match, then the first occurrence (in row order) is the one that is used.</p>
<p>Col types int1/int2/int4/float/varbyte not allowed.</p>
<p><strong>ref</strong> join from table F to table G creates a jdref col in table F that is the index to the corresponding row in table G. The jdref values are <code>Gkey i. Fkey</code> so the join from table F is to the first matching row in G (or nulls if no match).</p>
<p><strong>ref /left</strong> join from table F to table G creates a jdref col in table F hat has all rows in F paired with a null row or all the rows (matched by key) in G.</p>
<p><strong>upsert</strong> key is used to determine which data rows are used to update and which data rows are inserted.</p>
<p><strong>update</strong> where clause can be a key.</p>
<p><strong>delete</strong> where clause can be a key.</p>
<p><strong>reads</strong> where clause does not currently support key. Use of key op to get rows and using them with jdindex in (...) is a workaround.</p>
</body>
</html>
